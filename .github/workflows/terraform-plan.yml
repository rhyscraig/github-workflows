name: Terraform Plan

on:
  workflow_call:
    inputs: 
      aws_region:
        type: string
        required: false
        description: "What region do we wish to run AWS auth in"
        default: "eu-west-2"
      code_owner:
        type: string
        required: false
        description: "Which organization owns the code to deploy"
      environment:
        type: string
        required: true
        description: "What AWS env to deploy to"
        default: "prd"
      state_bucket:
        type: string
        required: false
        description: "What S3 bucket to use for terraform state files"
        default: "395101865577-terraform-state-bucket"
      state_bucket_path:
        type: string
        required: false
        description: "The path to the state file"
        default: "core/terraform.tfstate"
      state_bucket_region:
        type: string
        required: false
        description: "What region the state bucket is in"
        default: "eu-west-2"
      terraform_version:
        type: string
        required: false
        description: "What version of terraform to use"
        default: "~1.6.0"

env:
  SSH_AUTH_SOCK: /tmp/ssh_agent.sock
  SSH_KEY: ${{ secrets.GH_ACTIONS_SERVICE_USER_SSH_KEY }}
  AWS_DEFAULT_REGION: eu-west-2
  AWS_REGION: eu-west-2
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
  tfvars_path: ./env/prd.tfvars
jobs:
  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Load environment-specific configuration
        id: load_config
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const configPath = './config/pipeline.json';
            const environment = "${{ inputs.environment }}";
            const defaults = {
              aws_region: "${{ inputs.aws_region }}",
              code_owner: "${{ inputs.code_owner }}",
              state_bucket: "${{ inputs.state_bucket }}",
              state_bucket_region: "${{ inputs.state_bucket_region }}"
            };
            let config = {};
            if (fs.existsSync(configPath)) {
              const fullConfig = JSON.parse(fs.readFileSync(configPath, 'utf8'));
              if (!fullConfig[environment]) {
                core.setFailed(`Configuration for the environment '${environment}' is not found.`);
              } else if (!fullConfig[environment].role_to_assume) {
                core.setFailed(`'role_to_assume' is not defined in the configuration for the given environment '${environment}'.`);
              } else {
                config = { ...defaults, ...fullConfig[environment] };
              }
            } else {
              core.setFailed(`Configuration file not found at '${configPath}'`);
            }
            for (const key in config) {
              if (config[key]) {
                core.setOutput(key, config[key]);
                console.log(`Set ${key}: ${config[key]}`);
              }
            }

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ steps.load_config.outputs.aws_region }}
          role-to-assume: ${{ steps.load_config.outputs.role_to_assume }}
          role-session-name: GithubActionsSession

      - name: Check Environment Configuration
        id: check_env
        run: |
          ENVIRONMENT="${{ inputs.environment }}"
          ENV_FILE="./env/$ENVIRONMENT.tfvars"
          if [[ "$ENVIRONMENT" != "none" ]] && [ ! -f "$ENV_FILE" ]; then
            echo "Error: .tfvars file does not exist for the specified environment $ENVIRONMENT."
            echo "### Job Failed :warning:\n**Error:** The required .tfvars file for the environment '$ENVIRONMENT' does not exist. Please ensure the file is present in the './env/' directory and try again." >> $GITHUB_STEP_SUMMARY
            exit 1
          elif [[ "$ENVIRONMENT" != "NONE" ]]; then
            echo "tfvars_path=$ENV_FILE" >> $GITHUB_ENV
          else
            echo "tfvars_path=" >> $GITHUB_ENV
          fi

      - name: Set up SSH private key
        run: |
          mkdir -p /home/runner/.ssh
          ssh-keyscan github.com >> /home/runner/.ssh/known_hosts
          echo "${{ env.SSH_KEY }}" | tr -d '\r' > /home/runner/.ssh/github_actions
          chmod 600 /home/runner/.ssh/github_actions
          eval $(ssh-agent -s)
          ssh-add /home/runner/.ssh/github_actions        

      - name: Terraform Init
        run: |
          # Extract values from environment or configuration
          ACCOUNT_ID=$(echo "${{ steps.load_config.outputs.role_to_assume }}" | cut -d':' -f5)
          AWS_TF_STATE_PATH="${{ inputs.state_bucket_path }}" # Ensure this is correct and not empty
          
          # Ensure the path variable is not empty
          if [ -z "$AWS_TF_STATE_PATH" ]; then
            echo "Error: AWS_TF_STATE_PATH is empty. Please check your state_bucket_path configuration."
            exit 1
          fi
          
          # Initialize Terraform
          terraform init \
            -backend-config "bucket=${{ steps.load_config.outputs.state_bucket }}" \
            -backend-config "region=${{ steps.load_config.outputs.state_bucket_region }}" \
            -backend-config "key=$AWS_TF_STATE_PATH" \
            -backend-config "encrypt=true"        

      - name: Terraform Plan
        run: |
          TFCMD="terraform plan -out ${{ github.event.repository.name }}-${{ inputs.environment }}.out"
          if [ -n "${{ env.tfvars_path }}" ]; then
            TFCMD="$TFCMD -var-file=${{ env.tfvars_path }}"
          fi
          echo "Running: $TFCMD"
          eval $TFCMD

      - name: Terraform Plan and Markdown Summary
        id: plan
        run: |
          echo '```terraform' >> $GITHUB_STEP_SUMMARY
          echo '### Terraform Plan' >> $GITHUB_STEP_SUMMARY
          terraform show -no-color ${{ github.event.repository.name }}-${{ inputs.environment }}.out | tee -a $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-${{ inputs.environment }}
          path: ./${{ github.event.repository.name }}-${{ inputs.environment }}.out

      - name: Convert Terraform Plan to JSON
        id: convert_plan
        run: |
          terraform show -json ${{ github.event.repository.name }}-${{ inputs.environment }}.out | tee ${{ github.event.repository.name }}-${{ inputs.environment }}.json

      # Uncomment these steps if needed
      # - name: Upload Scan Artifacts
      #   uses: rapid7/insightcloudsec-actions@v2
      #   continue-on-error: true
      #   id: ics_scan
      #   with:
      #     api_key: ${{ secrets.RAPID7_API_KEY }}
      #     base_url: ${{ secrets.RAPID7_BASE_URL }}
      #     config_name: IaC Analyzer - Global Use
      #     target: ${{ github.event.repository.name }}-${{ inputs.environment }}.json

      # - name: Upload scan artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: mimics-scan-artifacts
      #     path: |
      #       ./log/mimics*.log
      #       ./ics_scan.*

      # - name: Extract Report from SARIF
      #   id: extract_report
      #   run: |
      #     jq '.runs[] | .results' ics_scan.sarif > ics_scan.json

      # - name: Append ICS Scan Results to Job Summary
      #   run: |
      #     echo '```json' >> $GITHUB_STEP_SUMMARY
      #     echo '### ICS Scan Results' >> $GITHUB_STEP_SUMMARY
      #     cat ./ics_scan.json >> $GITHUB_STEP_SUMMARY
      #     echo '```' >> $GITHUB_STEP_SUMMARY
